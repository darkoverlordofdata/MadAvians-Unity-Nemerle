#pragma indent

using System
using UnityEngine

namespace HelloWorld 

    public class TargetDamage : MonoBehaviour 
    
        //	The amount of damage our target can take
        public mutable hitPoints:int = 2
        //	The reference to our "damaged" sprite
        public mutable damagedSprite:Sprite
        //	The speed threshold of colliding objects before the target takes damage
        public mutable damageImpactSpeed:float
        
        //	The current amount of health our target has taken
        mutable currentHitPoints:int
        //	The square value of Damage Impact Speed, for efficient calculation
        mutable damageImpactSpeedSqr:float
        //	The reference to this GameObject's sprite renderer
        mutable spriteRenderer:SpriteRenderer
        
        public Start():void
            //	Get the SpriteRenderer component for the GameObject's Rigidbody
            spriteRenderer = GetComponent():SpriteRenderer
            
            //	Initialize the Hit Points
            currentHitPoints = hitPoints
            
            //	Calculate the Damage Impact Speed Squared from the Damage Impact Speed
            damageImpactSpeedSqr = damageImpactSpeed * damageImpactSpeed
        
        
        public OnCollisionEnter2D(collision:Collision2D):void
            //	Check the colliding object's tag, and if it is not "Damager", exit this function
            when (collision.collider.tag == "Damager")
                
                //	Check the colliding object's velocity's Square Magnitude, and if it is less than the threshold, exit this function
                when (collision.relativeVelocity.sqrMagnitude >= damageImpactSpeedSqr)

                    //	We have taken damage, so change the sprite to the damaged sprite
                    spriteRenderer.sprite = damagedSprite
                    //	Decriment the Current Health of the target
                    currentHitPoints--
                    
                    //	If the Current Health is less than or equal to zero, call the Kill() function
                    when (currentHitPoints <= 0)
                        Kill()
            
        public Kill():void
            //	As the particle system is attached to this GameObject, when Killed, switch off all of the visible behaviours...
            spriteRenderer.enabled = false
            (GetComponent():Collider2D).enabled = false
            (GetComponent():Rigidbody2D).isKinematic = true
            
            //	... and Play the particle system
            (GetComponent():ParticleSystem).Play()
        
                








